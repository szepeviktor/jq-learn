# Tests are groups of three lines: program, input, expected output.
# Blank lines and lines starting with # are ignored.

#########################################################################
# Set functions
#########################################################################

#
# set construction
#

include "lib/icon"; set(.)
[3,2,1,"k"]
{"1":true,"2":true,"3":true,"k":true}

include "lib/icon"; cset(.)
"aeiuo"
{"a":true,"e":true,"i":true,"o":true,"u":true}

# ∅
length
{ }
0

include "lib/icon"; cset(.) | keys
"aeiuo"
["a","e","i","o","u"]

include "lib/icon"; cset(.) | length
"aeiuo"
5

#
# set add/del
#

include "lib/icon"; cset(.) | del(.e)
"aeiuo"
{"a":true,"i":true,"o":true,"u":true}

include "lib/icon"; cset(.) | del(.e) | .e = true
"aeiuo"
{"a":true,"e":true,"i":true,"o":true,"u":true}

include "lib/icon"; cset(.) | (.o,.u) = true
"aei"
{"a":true,"e":true,"i":true,"o":true,"u":true}

include "lib/icon"; cset(.) | del(.e,.a,.u)
"aeiuo"
{"i":true,"o":true}

include "lib/icon"; cset(.) | del(.e) | . += {e:true}
"aeiuo"
{"a":true,"e":true,"i":true,"o":true,"u":true}

include "lib/icon"; cset(.) | del(.e,.a,.u) | . += {u:true,a:true,e:true}
"aeiuo"
{"a":true,"e":true,"i":true,"o":true,"u":true}

include "lib/icon"; cset(.) | del(.e,.a,.u) | (.e,.a,.u) = true
"aeiuo"
{"a":true,"e":true,"i":true,"o":true,"u":true}

include "lib/icon"; cset(.) | .x = true
"abc"
{"a":true,"b":true,"c":true,"x":true}

#
# set membership
#

# ∋
include "lib/icon"; set(.) | has("k")
[3,2,1,"k"]
true

# ∋
include "lib/icon"; set(.) | .k
[3,2,1,"k"]
true

# ∋
include "lib/icon"; set(.) | has("h")
[3,2,1,"k"]
false

# ∋
include "lib/icon"; set(.) | if .h then true else false end
[3,2,1,"k"]
false

# ∋
include "lib/icon"; set(.) | .h
[3,2,1,"k"]
null

# ∌
include "lib/icon"; set(.) | .h|not
[3,2,1,"k"]
true

# ∌
include "lib/icon"; set(.) | .h==null
[3,2,1,"k"]
true

# ∈
include "lib/icon"; set(.) as $s | "k" | in($s)
[3,2,1,"k"]
true

# ∈
include "lib/icon"; set(.) as $s | "h" | in($s)
[3,2,1,"k"]
false

# ∈
include "lib/icon"; set(.) as $s | "h" | in($s)
[3,2,1,"k"]
false

# ∉
include "lib/icon"; set(.) as $s | "h" | in($s)|not
[3,2,1,"k"]
true

# null => false
include "lib/icon"; set(.) | .h//false
[3,2,1,"k"]
false

#
# set operations
#

# ∪
include "lib/icon"; cset("aiu") + cset("eo")
null
{"a":true,"e":true,"i":true,"o":true,"u":true}

# ∪
include "lib/icon"; cset("aiu") * cset("eo")
null
{"a":true,"e":true,"i":true,"o":true,"u":true}

# ∩
include "lib/icon"; cset("aeiouxyz") | intersection(cset("xyz12345"))
null
{"x":true,"y":true,"z":true}

# ∩ ∅
include "lib/icon"; (cset("xyz") | intersection(cset("abc"))) == {}
null
true

# ∩ ∪
include "lib/icon"; cset("aiu") + cset("eo") | intersection(cset("eo"))
null
{"o":true,"e":true}

include "lib/icon"; cset("aeiou") | intersection(cset("eo")) + cset("aiu")
null
{"a":true,"e":true,"i":true,"o":true,"u":true}

# –
include "lib/icon"; cset("aeiou") | difference(cset("abc"))
null
{"e":true,"i":true,"o":true,"u":true}

#
# set containment
#

# ⊂
include "lib/icon"; cset("xyz") as $a | cset("xyz12345") as $b | $a != $b and ($a | intersection($b)) == $a
null
true

# ⊂
include "lib/icon"; cset("xyz") | subset(cset("xyz12345"))
null
true

# ⊃ 
include "lib/icon"; cset("xyz123") as $a | cset("xyz") as $b | $a != $b and ($a | intersection($b)) == $b
null
true

# ≡
. == { }
{ }
true

# ≡
include "lib/icon"; cset("xyz") == {"y":true,"x":true,"z":true}
null
true

# ≢
include "lib/icon"; cset("xyz") != { }
null
true

# vim:ai:sw=2:ts=2:et:syntax=python
