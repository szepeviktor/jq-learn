#!/bin/bash

#
# Wraps jq to be able to process YAML
#

# Show help?
if [[ $# -eq 0 || $1 == '-h' || $1 == '--help' ]]; then
    cat <<\EOF
yq - commandline YAML processor
Usage: yq [options] <jq filter>

    yq is a wrapper to jq for processing YAML input, applying the given
    filter to YAML text read from the standard input and producing the
    filter's results as YAML on standard output.

    The options available are yq specific and also from jq. The yq
    options are:
     -h     Show this help
     -J     Preserve JSON output format
     -K     Accept input from terminal
    
    Some of the jq options include:
     -e     set the exit status code based on the output
     -f     Read filter from the file f
     -s     read (slurp) all inputs into an array; apply filter to it
     -S     sort keys of objects on output
     --arg a v          set variable $a to value v
     --argjson a v      set variable $a to JSON value v
     --slurpfile a f    set variable $a to an array of values read from f
    Not all jq options have sense using yq.

    For more advanced filters see the jq(1) manpage and
    https://stedolan.github.io/jq
EOF
    exit $(( $# == 0 ))
fi

# Only accept terminal input with explicit petition
if [[ -t 0 ]]; then
    if [[ $1 == '-K' ]]; then
        shift
    else
        echo 1>&2 'Error: reading from terminal; yq must have stdin redirected'
        exit 1
    fi
fi

# Format conversors
declare -r Y2J=$(dirname $0)/y2j
declare -r J2Y=$(dirname $0)/j2y

# Wrap jq
set -o pipefail

if [[ $1 == '-J' || $1 == '--JSON' ]]; then
    shift
    # Preserve JSON output
    ${Y2J} | jq "$@"
else
    ${Y2J} | jq "$@" | ${J2Y}
fi

exit $?

# vim:ai:sw=4:ts=4:et:syntax=sh
