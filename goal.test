# Tests are groups of three lines: program, input, expected output.
# Blank lines and lines starting with # are ignored.

#########################################################################
# Goal-directed programming
#########################################################################


("0","1") + ("0","1")
null
"00"
"10"
"01"
"11"

("0","1") as $a | ("0","1") as $b | $a+$b
null
"00"
"01"
"10"
"11"

limit(3; (./"")[] + (./"")[])
"0123456789ABCDEF"
"00"
"10"
"20"

limit(3; (./"")[] as $a | (./"")[] as $b | $a+$b)
"0123456789ABCDEF"
"00"
"01"
"02"

last((./"")[] + (./"")[])
"0123456789ABCDEF"
"FF"

limit(3; (range(.) + range(.)))
1000000000
0
1
2

pow(range(1;6); 2)
null
1
4
9
16
25

pow(1,2,3,4,5; 2)
null
1
4
9
16
25

pow(range(1;6); 2,3)
null
1
4
9
16
25
1
8
27
64
125

def find(s; t): t|_strindices(s)[]; find("on"; "one motion is optional")
null
0
8
18

def upto(c; s): s | [_strindices((c/"")[])] | flatten | unique[]; upto("on"; .)
"one motion is optional"
0
1
5
8
9
14
18
19

def find(s; t): t|_strindices(s)[]; find("ma"; "mi mama me mima")
null
3
5
13

def find(s; t): t|_strindices(s)[]; find("ab"; .)
"abaabbaaabbbaaaabbbb" 
0
3
8
15

def upto(c; s): s | [_strindices((c/"")[])] | flatten | unique[]; upto("aeiou"; .)
"kaleidoscope"
1
3
4
6
9
11

# not well ordered
def star($s): "", (($s/"")[]) + star($s); limit(8; star(.))
"01"
""
"0"
"1"
"00"
"10"
"01"
"11"
"000"

# ordered
def star($s): "", star($s) as $a | (($s/"")[]) as $b | $a + $b; limit(8; star(.))
"01"
""
"0"
"1"
"00"
"01"
"10"
"11"
"000"

def cut(g): label $pipe|g|.,break $pipe; cut(range(5;100))
null
5

def cut(g): label $pipe|g|.,break $pipe; cut(range(5;100)) == first(range(5;100))
null
true

def take($n; g): if $n<0 then g else label $loop | foreach g as $item ($n; if .<1 then break $loop else .-1 end; $item) end; [take(4;range(100))] == [limit(4;range(77))]
null
true

def drop($n; g): if $n<0 then g else foreach g as $item ($n; if .<0 then . else .-1 end; if .<0 then $item else empty end) end; drop(5; range(8))
null
5
6
7

def drop($n; g): if $n<0 then g else foreach g as $item ($n; if .<0 then . else .-1 end; if .<0 then $item else empty end) end; drop(1000; range(1002))
null
1000
1001

# vim:ai:sw=2:ts=2:et:syntax=python
