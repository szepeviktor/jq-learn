# Tests are groups of three lines: program, input, expected output.
# Blank lines and lines starting with # are ignored.

#########################################################################
# Goal-directed programming
#########################################################################


("0","1") + ("0","1")
null
"00"
"10"
"01"
"11"

("0","1") as $a | ("0","1") as $b | $a+$b
null
"00"
"01"
"10"
"11"

limit(3; (./"")[] + (./"")[])
"0123456789ABCDEF"
"00"
"10"
"20"

limit(3; (./"")[] as $a | (./"")[] as $b | $a+$b)
"0123456789ABCDEF"
"00"
"01"
"02"

last((./"")[] + (./"")[])
"0123456789ABCDEF"
"FF"

limit(3; (range(.) + range(.)))
1000000000
0
1
2

pow(range(1;6); 2)
null
1
4
9
16
25

pow(1,2,3,4,5; 2)
null
1
4
9
16
25

pow(range(1;6); 2,3)
null
1
4
9
16
25
1
8
27
64
125

include "lib/string"; find("on"; "one motion is optional")
null
0
8
18

include "lib/string"; upto("on"; .)
"one motion is optional"
0
1
5
8
9
14
18
19

include "lib/string"; find("ma"; "mi mama me mima")
null
3
5
13

include "lib/string"; find("ab"; .)
"abaabbaaabbbaaaabbbb" 
0
3
8
15

include "lib/string"; upto("aeiou"; .)
"kaleidoscope"
1
3
4
6
9
11

# not well ordered
include "lib/string"; limit(8; star(.))
"01"
""
"0"
"1"
"00"
"10"
"01"
"11"
"000"

# ordered
include "lib/string"; limit(8; star_wo(.))
"01"
""
"0"
"1"
"00"
"01"
"10"
"11"
"000"

# vim:ai:sw=2:ts=2:et:syntax=python
